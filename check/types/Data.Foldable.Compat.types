all :: Foldable t => (a -> GHC.Types.Bool) -> t a -> GHC.Types.Bool
and :: Foldable t => t GHC.Types.Bool -> GHC.Types.Bool
any :: Foldable t => (a -> GHC.Types.Bool) -> t a -> GHC.Types.Bool
asum :: (Foldable t, GHC.Base.Alternative f) => t (f a) -> f a
concat :: Foldable t => t [a] -> [a]
concatMap :: Foldable t => (a -> [b]) -> t a -> [b]
elem :: (Foldable t, GHC.Classes.Eq a) => a -> t a -> GHC.Types.Bool
find :: Foldable t => (a -> GHC.Types.Bool) -> t a -> GHC.Base.Maybe a
fold :: (Foldable t, GHC.Base.Monoid m) => t m -> m
foldl :: Foldable t => (b -> a -> b) -> b -> t a -> b
foldl' :: Foldable t => (b -> a -> b) -> b -> t a -> b
foldl1 :: Foldable t => (a -> a -> a) -> t a -> a
foldlM :: (Foldable t, GHC.Base.Monad m) =>    (b -> a -> m b) -> b -> t a -> m b
foldMap :: (Foldable t, GHC.Base.Monoid m) => (a -> m) -> t a -> m
foldr :: Foldable t => (a -> b -> b) -> b -> t a -> b
foldr' :: Foldable t => (a -> b -> b) -> b -> t a -> b
foldr1 :: Foldable t => (a -> a -> a) -> t a -> a
foldrM :: (Foldable t, GHC.Base.Monad m) =>    (a -> b -> m b) -> b -> t a -> m b
for_ :: (Foldable t, GHC.Base.Applicative f) =>    t a -> (a -> f b) -> f ()
forM_ :: (Foldable t, GHC.Base.Monad m) => t a -> (a -> m b) -> m ()
length :: Foldable t => t a -> GHC.Types.Int
mapM_ :: (Foldable t, GHC.Base.Monad m) => (a -> m b) -> t a -> m ()
maximum :: (Foldable t, GHC.Classes.Ord a) => t a -> a
maximumBy :: Foldable t => (a -> a -> GHC.Types.Ordering) -> t a -> a
minimum :: (Foldable t, GHC.Classes.Ord a) => t a -> a
minimumBy :: Foldable t => (a -> a -> GHC.Types.Ordering) -> t a -> a
msum :: (Foldable t, GHC.Base.MonadPlus m) => t (m a) -> m a
notElem :: (Foldable t, GHC.Classes.Eq a) => a -> t a -> GHC.Types.Bool
null :: Foldable t => t a -> GHC.Types.Bool
or :: Foldable t => t GHC.Types.Bool -> GHC.Types.Bool
product :: (Foldable t, GHC.Num.Num a) => t a -> a
sequence_ :: (Foldable t, GHC.Base.Monad m) => t (m a) -> m ()
sequenceA_ :: (Foldable t, GHC.Base.Applicative f) => t (f a) -> f ()
sum :: (Foldable t, GHC.Num.Num a) => t a -> a
toList :: Foldable t => t a -> [a]
traverse_ :: (Foldable t, GHC.Base.Applicative f) =>    (a -> f b) -> t a -> f ()
